


=pod

=head1 NAME

ln-- - Quick and dirty `smart' link creation simulating ln(1).

Synopsis:
  ln-- [OPTION]... [-T] TARGET LINK_NAME   (1st form)
  ln-- [OPTION]... TARGET                  (2nd form)
  ln-- [OPTION]... TARGET... DIRECTORY     (3rd form)
  ln-- [OPTION]... -t DIRECTORY TARGET...  (4th form)

In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.
By default, creates hard links if pssible and symbolic links if
hard link creation fails. By default, each destination (name of new
link) should not already exist. When creating hard links, each
TARGET must exist.  Symbolic links can hold arbitrary text; if
later resolved, a relative link is interpreted in relation to its
parent directory.



=head1 SYNOPSIS

ln-- [OPTIONS] TARGET... LINK_NAME_OR_DIRECTORY

 Arguments:
    TARGET...               Link targets ln(1)
    LINK_NAME_OR_DIRECTORY  Link to create or target directory

 Options
    -h     --help                  Print help and exit.
    -V     --version               Print version and exit.
    -v     --verbose               Print verbose output to stderr.

 Link Type Options
    -a     --any                   create hardlinks if possible, otherwise symlinks (default)
    -H     --hard                  create only hardlinks
    -s     --symbolic              create only symlinks

 ln(1) Simulation Options
    -f     --force                 remove existing destination files
    -n     --no-dereference        treat LINK_NAME as a normal file if it is a symbolic link to a directory
    -tDIR  --target-directory=DIR  specify the DIRECTORY in which to create the links
    -T     --no-target-directory   treat LINK_NAME as a normal file always

=cut

###############################################################
# Description
###############################################################
=pod

=head1 DESCRIPTION

Quick and dirty `smart' link creation simulating ln(1).

Synopsis:
  ln-- [OPTION]... [-T] TARGET LINK_NAME   (1st form)
  ln-- [OPTION]... TARGET                  (2nd form)
  ln-- [OPTION]... TARGET... DIRECTORY     (3rd form)
  ln-- [OPTION]... -t DIRECTORY TARGET...  (4th form)

In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.
By default, creates hard links if pssible and symbolic links if
hard link creation fails. By default, each destination (name of new
link) should not already exist. When creating hard links, each
TARGET must exist.  Symbolic links can hold arbitrary text; if
later resolved, a relative link is interpreted in relation to its
parent directory.


See ln(1).  The only thing this program does that ln itself doesn't is
fall back to creating symlinks if hard-link creation fails.  Otherwise,
you should almost certainly be using ln.


=cut

###############################################################
# Arguments
###############################################################

=pod

=head1 ARGUMENTS

=over 4

=item C<TARGET...>

Link targets ln(1)

=item C<LINK_NAME_OR_DIRECTORY>

Link to create or target directory

=back



=cut



###############################################################
# Options
###############################################################

=pod

=head1 OPTIONS

=over 4

=item C<--help> , C<-h>

Print help and exit.

Default: '0'




=item C<--version> , C<-V>

Print version and exit.

Default: '0'




=item C<--verbose> , C<-v>

Print verbose output to stderr.

Default: '0'




=back

=cut

#--------------------------------------------------------------
# Option-Group Link Type Options
#--------------------------------------------------------------
=pod

=head2 Link Type Options

=over 4

=item C<--any> , C<-a>

create hardlinks if possible, otherwise symlinks (default)

Default: '0'




=item C<--hard> , C<-H>

create only hardlinks

Default: '0'




=item C<--symbolic> , C<-s>

create only symlinks

Default: '0'




=back

=cut

#--------------------------------------------------------------
# Option-Group ln(1) Simulation Options
#--------------------------------------------------------------
=pod

=head2 ln(1) Simulation Options

=over 4

=item C<--force> , C<-f>

remove existing destination files

Default: '0'




=item C<--no-dereference> , C<-n>

treat LINK_NAME as a normal file if it is a symbolic link to a directory

Default: '0'




=item C<--target-directory=DIR> , C<-tDIR>

specify the DIRECTORY in which to create the links

Default: 'NULL'




=item C<--no-target-directory> , C<-T>

treat LINK_NAME as a normal file always

Default: '0'




=back




=cut



###############################################################
# configuration files
###############################################################



###############################################################
# Addenda
###############################################################

=pod

=head1 ADDENDA



=head2 About this Document

Documentation file auto-generated by optgen.perl version 0.15
using Getopt::Gen version 0.15.
Translation was initiated
as:

   optgen.perl -u -l --no-handle-rcfile -F cmdline cmdline.gog

=cut


###############################################################
# Bugs
###############################################################
=pod

=head1 BUGS AND LIMITATIONS



Not all options to ln(1) are supported.

Probably many more, too.



=cut

###############################################################
# Footer
###############################################################
=pod

=head1 ACKNOWLEDGEMENTS

Perl by Larry Wall.

Getopt::Gen by Bryan Jurish.

=head1 AUTHOR

Bryan Jurish E<lt>moocow@cpan.orgE<gt>

=head1 SEE ALSO


ln(1),
cp(1)


=cut


