#
# Getopt::Gen specification for moot
#-----------------------------------------------------------------------------
program "ln--"
#program_version "0.01"

purpose	"Quick and dirty `smart' link creation simulating ln(1).

Synopsis:
  ln-- [OPTION]... [-T] TARGET LINK_NAME   (1st form)
  ln-- [OPTION]... TARGET                  (2nd form)
  ln-- [OPTION]... TARGET... DIRECTORY     (3rd form)
  ln-- [OPTION]... -t DIRECTORY TARGET...  (4th form)

In the 1st form, create a link to TARGET with the name LINK_NAME.
In the 2nd form, create a link to TARGET in the current directory.
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.
Create hard links by default, symbolic links with --symbolic.
By default, each destination (name of new link) should not already exist.
When creating hard links, each TARGET must exist.  Symbolic links
can hold arbitrary text; if later resolved, a relative link is
interpreted in relation to its parent directory."

author  "Bryan Jurish <moocow@cpan.org>"
on_reparse "warn"

#-----------------------------------------------------------------------------
# Details
#-----------------------------------------------------------------------------
details "
See ln(1).  The only thing this program does that ln itself doesn't is
fall back to creating symlinks if hard-link creation fails.  Otherwise,
you should almost certainly be using ln.
"

#-----------------------------------------------------------------------------
# Arguments
#-----------------------------------------------------------------------------
argument "TARGET..." "Link targets ln(1)"
argument "LINK_NAME_OR_DIRECTORY" "Link to create or target directory"

#-----------------------------------------------------------------------------
# Options
#-----------------------------------------------------------------------------
#group "Basic Options"

flag "verbose" v "Print verbose output to stderr."

#-----------------------------------------------------------------------------
group "Link Type Options"

flag "any" a "create hardlinks if possible, otherwise symlinks (default)" \
     code='q{args_info->hard_given=args_info->symbolic_given=0;}'
flag "hard" H "create only hardlinks" \
     code='q{args_info->any_given=args_info->symbolic_given=0;}'
flag "symbolic" s "create only symlinks" \
     code='q{args_info->any_given=args_info->hard_given=0;}'


# see glibc info for canonicalize_file_name(), also POSIX realpath()
#flag "absolute" A "use absolute paths when creating links"


#-----------------------------------------------------------------------------
group "ln(1) Simulation Options"
flag "force" f "remove existing destination files"
flag "no-dereference" n "treat LINK_NAME as a normal file if it is a symbolic link to a directory"
string "target-directory" t "specify the DIRECTORY in which to create the links" arg="DIR"
flag "no-target-directory" T "treat LINK_NAME as a normal file always"

#-----------------------------------------------------------------------------
# not yet implemented, from ln(1) manpage:
 #    --backup CTRL    # make a backup of each existing destination file
 #-b                   # like --backup but does not accept an argument
 #-d, --directory      # allow the superuser to attempt to hard link directories (will probably fail)
 #-i, --interactive    # prompt whether to remove destinations
 #-l, --logical        # dereference TARGETs that are symbolic links
 #-n, --no-dereference # treat LINK_NAME as a normal file if it is a symbolic link to a directory
 #-P, --physical       # make hard links directly to symbolic links
 #-r, --relative       # create symbolic links relative to link location
 #-S, --suffix=s       # override the usual backup suffix


#-----------------------------------------------------------------------------
# Addenda
#-----------------------------------------------------------------------------
#addenda ""

#-----------------------------------------------------------------------------
# Bugs
#-----------------------------------------------------------------------------
bugs "

Not all options to ln(1) are supported.

Probably many more, too.

"

#-----------------------------------------------------------------------------
# Footer
#-----------------------------------------------------------------------------
#acknowledge `cat acknowledge.pod`

seealso "
ln(1),
cp(1)
"
